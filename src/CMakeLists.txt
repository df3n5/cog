cmake_minimum_required(VERSION 2.8)
project(cog C)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})
find_package(SDL2 REQUIRED)
# GLES
find_package(OpenGL REQUIRED)
find_package(GLEW)

INCLUDE(FindFreetype)
IF(NOT FREETYPE_FOUND)
    FIND_LIBRARY(FREETYPE_LIBRARIES NAMES libfreetype freetype.dll PATHS "./libs/MacOS" "./libs/Windows" DOC "Freetype library")
    FIND_PATH(FREETYPE_INCLUDE_DIRS ftbuild.h "./includes" DOC "Freetype includes")
ENDIF(NOT FREETYPE_FOUND)
INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})

find_package(PNG REQUIRED)
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})

if(PLATFORM_BUILD STREQUAL Pandora)
    find_package(OpenGLES REQUIRED)
    find_package(EGL REQUIRED)
endif ()
find_package(Lua51)

find_package(ALUT REQUIRED)
find_package(OpenAL REQUIRED)
#add_definitions(-std=c99 -Werror -Wall)
add_definitions(-std=c99 -Wall)

set(CMAKE_BUILD_TYPE Debug)

file(GLOB srcs *.c)
add_library(cog ${srcs})
if(LUA51_FOUND)
    file(GLOB lua_srcs ../lua/*.c)
    add_library(cogl SHARED ${srcs} ${lua_srcs})
endif()

if(PLATFORM_BUILD STREQUAL Pandora)
    #Add 3rd party libs
    file(GLOB lib_srcs ../deps/src/*.c)
    add_executable(libs ${lib_srcs})
    target_link_libraries(cog libs)
    add_library(cog ${srcs})
    MESSAGE("Building for Pandora...")
    target_link_libraries(cog m ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${SDLTTF_LIBRARY} ${ALUT_LIBRARY} ${OPENAL_LIBRARY} ${OPENGLES_LIBRARIES} ${EGL_LIBRARIES} ${OPENGL_LIBRARY} )
    target_link_libraries(cogl m ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${SDLTTF_LIBRARY} ${ALUT_LIBRARY} ${OPENAL_LIBRARY} ${OPENGLES_LIBRARIES} ${EGL_LIBRARIES} ${OPENGL_LIBRARY} ${LUA_LIBRARIES})
else()
    MESSAGE("Building for native platform...")
    target_link_libraries(cog m ${SDL2_LIBRARY} ${ALUT_LIBRARY} ${OPENAL_LIBRARY} ${GLEW_LIBRARY} ${OPENGL_LIBRARY} ${FREETYPE_LIBRARIES} ${PNG_LIBRARIES})
    #target_link_libraries(cogl m ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${SDLTTF_LIBRARY} ${ALUT_LIBRARY} ${OPENAL_LIBRARY} ${OPENGLES_LIBRARIES} ${EGL_LIBRARIES} ${GLEW_LIBRARY} ${OPENGL_LIBRARY} ${LUA_LIBRARIES})
endif()

#GLES (#ifdef out)
if(PLATFORM_BUILD STREQUAL Pandora)
    add_definitions(-DWITH_GLES)
endif ()

set(TEST_DIR ../tests)
include_directories("${CMAKE_SOURCE_DIR}" "${TEST_DIR}")

add_executable(cog_test ${TEST_DIR}/test.c)
target_link_libraries(cog_test cog)
add_executable(cog_test_anim ${TEST_DIR}/test_anim.c)
target_link_libraries(cog_test_anim cog)
add_executable(cog_test_sound ${TEST_DIR}/test_sound.c)
target_link_libraries(cog_test_sound cog)
add_executable(cog_test_text ${TEST_DIR}/test_text.c)
target_link_libraries(cog_test_text cog)
add_executable(cog_test_list ${TEST_DIR}/test_list.c)
target_link_libraries(cog_test_list cog)
add_executable(cog_test_state ${TEST_DIR}/test_state.c)
target_link_libraries(cog_test_state cog)

# Installation
FILE(GLOB headers "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
INSTALL(FILES ${headers} DESTINATION include)
#FILE(GLOB bins "${CMAKE_CURRENT_BINARY_DIR}/cog*")
INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/cog_test DESTINATION bin)
