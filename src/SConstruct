import platform
import os
import shutil

bin_folder = '../bin'
dll_folder = '../deps/lib/win-x86'

def copy_to_bin_folder(filename):
    print("copying " + filename + " to " + bin_folder)
    shutil.copy(filename, bin_folder)

def create_bin_folder():
    print("creating folder " + bin_folder)
    if not os.path.exists(bin_folder): 
        os.makedirs(bin_folder)

def remove_bin_folder():
    print("removing folder " + bin_folder)
    shutil.rmtree(bin_folder, ignore_errors=True)

def copy_dlls_to_bin_folder():
    dll_files = [file for file in os.listdir(dll_folder) if file.lower().endswith('.dll')]
    for f in dll_files:
        copy_to_bin_folder(os.path.join(dll_folder, f))

def post_action(target,source,env):
    if not env.GetOption('clean'):
        create_bin_folder()
        copy_to_bin_folder(target[0].name)
        copy_dlls_to_bin_folder()

if platform.system() == 'Windows':
    env = Environment(CC='gcc',CCFLAGS='-std=c99',tools = ['mingw'], ENV = os.environ)
    env.PrependENVPath('PATH', 'C:\\MinGW\\bin')
    env.PrependENVPath('LIB', 'C:\\MinGW\\lib')

    common_deps = ['glew32', 'opengl32','SDL','SDLmain','glu32','cog', 'mingw32', 'OpenAL32', 'alut', 'SDL_image', 'SDL_ttf']
    client_deps = ['cog'] + common_deps
    lib_path =['../deps/lib/win-x86','.']

    env.StaticLibrary('cog', ['cog.c', 'cog_map.c', 'cog_core.c', 'cog_list.c', 'cog_state.c'], CPPPATH=['../deps/include/AL', '../deps/include', '.'], LIBPATH =lib_path, LIBS=common_deps)

    testanim = env.Program('testanim', ['testanim.c'], LIBS=client_deps, LIBPATH=lib_path )
    AddPostAction(testanim,post_action)

    if env.GetOption('clean'):
        remove_bin_folder()
else:
    print("Platform not implemented yet...")
